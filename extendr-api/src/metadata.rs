//! Module metadata
//!
//! This data is returned by get_module_metadata()
//! which is generated by [extendr_module!].
use crate::*;

/// Metadata function argument.
#[derive(Debug, PartialEq)]
pub struct Arg {
    pub name: &'static str,
    pub arg_type: &'static str,
}

/// Metadata function.
#[derive(Debug, PartialEq)]
pub struct Func {
    pub doc: &'static str,
    pub name: &'static str,
    pub args: Vec<Arg>,
    pub return_type: &'static str,
    pub func_ptr: *const u8,
    pub hidden: bool, 
}

/// Metadata Impl.
#[derive(Debug, PartialEq)]
pub struct Impl {
    pub doc: &'static str,
    pub name: &'static str,
    pub methods: Vec<Func>,
}

/// Module metadata.
#[derive(Debug, PartialEq)]
pub struct Metadata {
    pub functions: Vec<Func>,
    pub impls: Vec<Impl>,
}

impl From<Arg> for Robj {
    fn from(val: Arg) -> Self {
        let res : Robj = List(&[r!(val.name), r!(val.arg_type)]).into();
        res.set_attrib(names_symbol(), r!(["name", "arg_type"]));
        res
    }
}

impl From<Func> for Robj {
    fn from(val: Func) -> Self {
        let res : Robj = List(&[
            r!(val.doc),
            r!(val.name),
            r!(List(val.args)),
            r!(val.return_type),
            r!(val.hidden),
        ])
        .into();
        res.set_attrib(names_symbol(), r!(["doc", "name", "args", "return.type", "hidden"]));
        res
    }
}

impl From<Impl> for Robj {
    fn from(val: Impl) -> Self {
        let res : Robj = List(&[r!(val.doc), r!(val.name), r!(List(val.methods))]).into();
        res.set_attrib(names_symbol(), r!(["doc", "name", "methods"]));
        res
    }
}

impl From<Metadata> for Robj {
    fn from(val: Metadata) -> Self {
        let res : Robj = List(&[r!(List(val.functions)), r!(List(val.impls))]).into();
        res.set_attrib(names_symbol(), r!(["functions", "impls"]));
        res
    }
}
